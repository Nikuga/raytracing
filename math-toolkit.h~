#ifndef __RAY_MATH_TOOLKIT_H
#define __RAY_MATH_TOOLKIT_H

#include <math.h>
#include <stdio.h>
#include <assert.h>
#include <immintrin.h>	

static inline __forceinline
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
    v[1] /= d;
    v[2] /= d;
}

static inline __forceinline
double length(const double *v)
{
    return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}

static inline __forceinline
void add_vector(const double *a, const double *b, double *out)
{
    //for (int i = 0; i < 3; i++)
    //    out[i] = a[i] + b[i];
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
}

static inline __forceinline
void subtract_vector(const double *a, const double *b, double *out)
{
    //for (int i = 0; i < 3; i++)
    //    out[i] = a[i] - b[i];
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];

    /*
    double tmp[4] __attribute__((aligned(32)));
    __m256d x = _mm256_set_pd(0.0, a[2], a[1], a[0]);
    __m256d y = _mm256_set_pd(0.0, b[2], b[1], b[0]);
    __m256d xy = _mm256_sub_pd(x,y);
    _mm256_store_pd(tmp, xy);
    out[0] = tmp[0];
    out[1] = tmp[1];
    out[2] = tmp[2];
    */
}

static inline __forceinline
void multiply_vectors(const double *a, const double *b, double *out)
{
    //for (int i = 0; i < 3; i++)
    //    out[i] = a[i] * b[i];
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];

}

static inline __forceinline
void multiply_vector(const double *a, double b, double *out)
{
    //for (int i = 0; i < 3; i++)
    //    out[i] = a[i] * b;
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
}

static inline __forceinline
void cross_product(const double *v1, const double *v2, double *out)
{	
    //out[0] = v1[1] * v2[2] - v1[2] * v2[1];
    //out[1] = v1[2] * v2[0] - v1[0] * v2[2];
    //out[2] = v1[0] * v2[1] - v1[1] * v2[0];
    /*
    __m256i mask = _mm256_set_epi64x(0x0000000000000000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff);
    __m256d x = _mm256_set_pd(0.0, v1[0], v1[2], v1[1]);
    __m256d y1 = _mm256_set_pd(0.0, v2[1], v2[0], v2[2]);
    __m256d y2 = _mm256_set_pd(0.0, v2[2], v2[1], v2[0]);
    __m256d xy1 = _mm256_mul_pd(x, y1);           // (      0.0, a[0]*b[1], a[2]*b[0], a[1]*b[2]);
    __m256d xy2 = _mm256_mul_pd(x, y2);                  // (0.0, a[0]*b[2], a[2]*b[1], a[1]*b[0]);
    __m256d xy3 = _mm256_permute_pd(xy2, 0x09);   // (      0.0, a[0]*b[2], a[1]*b[0], a[2]*b[1]);
    xy2 = _mm256_permute2f128_pd(xy2, xy2, 0x01);           // (a[2]*b[1], a[1]*b[0],       0.0, a[0]*b[2]);
    xy2 = _mm256_permute_pd(xy2, 0x09);           // (a[2]*b[1], a[1]*b[0], a[0]*b[2],       0.0);
    xy2 = _mm256_shuffle_pd(xy3, xy2, 0x06);      // (a[1]*b[0],       0.0, a[0]*b[2], a[2]*b[1]);  
    xy2 = _mm256_permute_pd(xy2, 0x06);           // (      0.0, a[1]*b[0], a[0]*b[2], a[2]*b[1]);  
    __m256d xyc = _mm256_sub_pd(xy1, xy2); 
    _mm256_maskstore_pd(out, mask, xyc);
    */
}

static inline __forceinline
double dot_product(const double *v1, const double *v2)
{
    double dp = 0.0;
    //for (int i = 0; i < 3; i++)
    //    dp += v1[i] * v2[i];
    dp += v1[0] * v2[0];
    dp += v1[1] * v2[1];
    dp += v1[2] * v2[2];
	return dp;
	
    /*
    //method 2
    double tmp[4] __attribute__((aligned(32)));
    __m256d x = _mm256_set_pd( v1[0], v1[1], v1[2], 0.0);
    __m256d y = _mm256_set_pd( v2[0], v2[1], v2[2], 0.0);
    __m256d xy = _mm256_mul_pd(x, y);
    _mm256_store_pd(tmp, xy);	
    return (tmp[0] + tmp[1] + tmp[2] + tmp[3]);
    */
}

static inline __forceinline
void scalar_triple_product(const double *u, const double *v, const double *w,
                           double *out)
{
    cross_product(v, w, out);
    multiply_vectors(u, out, out);
}

static inline __forceinline
double scalar_triple(const double *u, const double *v, const double *w)
{
    double tmp[3];
    cross_product(w, u, tmp);
    return dot_product(v, tmp);
}

#endif
